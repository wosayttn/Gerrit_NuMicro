RESET

FUNC void InvalidateDCache (void) {
    unsigned int ccsidr;
    unsigned int sets;
    unsigned int ways;

    /* ccsidr = SCB->CCSIDR; */
    ccsidr = _RDWORD(0xE000ED80);
    /* sets = (uint32_t)(CCSIDR_SETS(ccsidr)); */
    sets = (ccsidr & (0x7FFFUL << 13)) >> 13;
    do {
        /* ways = (uint32_t)(CCSIDR_WAYS(ccsidr)); */
        ways = (ccsidr & (0x3FFUL << 3)) >> 3;
        do {
            /* SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
                             ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  ); */
            _WDWORD(0xE000EF60, (sets << 5) & (0x1FFUL << 5) | (ways << 30) & (3UL << 30));
            _SLEEP_(10);
        } while (ways -- != 0);
    } while (sets-- != 0);
}
/* Invalidate I-Cache */
_WDWORD(0xE000EF50, 0);
/* Invalidate D-Cache */
InvalidateDCache();

/* Unlock protected registers */
_WDWORD(0x40000100, 0x59);
_WDWORD(0x40000100, 0x16);
_WDWORD(0x40000100, 0x88);
_SLEEP_(100);

/* Switch SRAM to normal power mode */
_WDWORD(0x40002104, 0x0);
_WDWORD(0x40002108, 0x0);
_SLEEP_(100);

/* Enable SRAM clock */
_WDWORD(0x400012C0, 0x7);
_SLEEP_(10);

LOAD %L INCREMENTAL

SP = _RDWORD(0x20100000);
PC = _RDWORD(0x20100004);
g, main
