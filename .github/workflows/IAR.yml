name: IAR building

on:
  push:
    branches:
      - '**'  # Match all branches
  pull_request:
    branches:
      - '**'  # Match all target branches of pull requests
  workflow_dispatch:

# Set a new GitHub Actions Secret named IAR_LMS_BEARER_TOKEN
# for your repository. The secret is then propagated to an
# Environment variable used for all jobs within this workflow
env:
  IAR_LMS_BEARER_TOKEN: ${{ secrets.IAR_LMS_BEARER_TOKEN }}

jobs:
  build:
    name: Build project
    runs-on: ubuntu-latest
    container: ghcr.io/iarsystems/arm:9.60.4-st
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Check compiler version and patch IAR device config
        shell: bash
        run: |
          # Find the installed IAR version path dynamically
          IAR_PATH=$(find /opt/iar -maxdepth 2 -type d -name "arm" | head -n 1)

          if [ -z "$IAR_PATH" ]; then
            echo "‚ùå IAR installation path not found."
            exit 1
          fi

          DEVICE_DIR="$IAR_PATH/config/devices/Nuvoton/"
          echo "üìÅ Using IAR device directory: $DEVICE_DIR"

          mkdir -p "$DEVICE_DIR"
          cp -af "$GITHUB_WORKSPACE/.github/IAR_Nuvoton/devices/"* "$DEVICE_DIR/"

          find $DEVICE_DIR

          LINKER_DIR="$IAR_PATH/config/linker/Nuvoton/"
          echo "üìÅ Using IAR device directory: $LINKER_DIR"

          mkdir -p "$LINKER_DIR"
          cp -af "$GITHUB_WORKSPACE/.github/IAR_Nuvoton/linker/"* "$LINKER_DIR/"

          find $LINKER_DIR

          echo "üîß Compiler version:"
          iccarm --version

      - name: Build all IAR projects
        shell: bash
        run: |
          REPO_ROOT="$GITHUB_WORKSPACE"
          chmod +x "$GITHUB_WORKSPACE/.github/workflows/vcpkg_blacklist_check.sh"

          mapfile -t solutions < <(find ./SampleCode -name '*.ewp')
          declare -a failed_logs=()

          set +e
          for sol_path in "${solutions[@]}"; do

            dir=$(dirname "$sol_path")
            sol_name=$(basename "$sol_path")
            log_path="$dir/$sol_name.txt"

            #echo "üî® Building $dir on $RUNNER_OS"
            iarbuild $sol_path -build '*' -log warnings > "$log_path" 2>&1
            ret1=$?

            # Check log file
            $REPO_ROOT/.github/workflows/vcpkg_blacklist_check.sh $log_path
            ret2=$?

            if [[ $ret1 -ne 0 || $ret2 -ne 0 ]]; then
              echo "‚ùå Build failed: $sol_path"
              echo "üîç Log:"
              cat "$log_path"

              # FIXME: Window post-action checking.
              if grep -Eq "/bin/sh:|NuBL33" "$log_path"; then
                echo "‚ÑπÔ∏è  Skipping log due to pattern matching in log"
              else
                failed_logs+=("$log_path")   # add log into the set
              fi

            else
              echo "‚úÖ Build success: $sol_path"
            fi

          done
          set -e

          # List all the paths of failed logs at the end (if any)
          if [[ ${#failed_logs[@]} -ne 0 ]]; then
            echo "üö® The following builds failed:"
            for log in "${failed_logs[@]}"; do
              echo "  - $log"
            done
            printf "%s," "${failed_logs[@]}" | sed 's/,$//' > failed_logs.txt
            echo "Wrote failed_logs.txt"
            exit 1
          else
            echo "üéâ All builds succeeded!"
          fi

      - name: Prepare failed logs for email
        id: prepare_logs
        shell: bash
        if: failure() # only runs if previous step failed
        run: |
          if [[ -f failed_logs.txt ]]; then
            logs=$(cat failed_logs.txt)
            echo "logs=$logs" >> "$GITHUB_OUTPUT"

            numbered_logs=""
            IFS=',' read -ra logs <<< "$(cat failed_logs.txt)"
            i=1
            for log in "${logs[@]}"; do
              numbered_logs+="[$i] $log\n"
              ((i++))
            done
            echo -e "msglogs<<EOF\n$numbered_logs\nEOF" >> "$GITHUB_OUTPUT"
          fi

      - name: Send mail
        if: failure()
        uses: dawidd6/action-send-mail@v5
        with:
          connection_url: ${{ secrets.MAIL_CONNECTION }}
          subject: ${{ github.repository }} [${{ github.ref_name }}] Job ${{ job.status }}
          to: ${{ secrets.MAIL_TO }}
          #cc: ${{ secrets.MAIL_CC }}
          from: Github Action Workflow <wosayttn@gmail.com>
          attachments: ${{ steps.prepare_logs.outputs.logs }}
          body: |
            Hello,

            The build has completed. Please find the attached log file for details.

            Failure:
            ${{ steps.prepare_logs.outputs.msglogs }}

            Best regards,
            NuMicro Actions
