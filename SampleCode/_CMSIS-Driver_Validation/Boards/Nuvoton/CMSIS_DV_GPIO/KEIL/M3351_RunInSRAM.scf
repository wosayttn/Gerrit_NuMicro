#! armclang -E --target=arm-arm-none-eabi -mcpu=cortex-m33 -xc
; command above MUST be in first line (no comment above!)

#if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
    #if __has_include("partition_M3351.h")
        #include "partition_M3351.h"                  /* User defined setup for Secure/Non-Secure Zones */
    #else
        #include "partition_M3351_template.h"         /* Default setup for Secure/Non-Secure Zones */
    #endif
#endif

/*
;-------- <<< Use Configuration Wizard in Context Menu >>> -------------------
*/

/*--------------------- Flash Configuration ----------------------------------
; <h> Flash Configuration
;   <o0> Flash Base Address     <0x0-0xFFFFFFFF:8>
;   <o1> Flash Size (in Bytes)  <0x0-0xFFFFFFFF:8>
; </h>
 *----------------------------------------------------------------------------*/
#define FLASH_START         0x00000000
#define FLASH_SIZE          0x00100000

/*--------------------- Embedded SRAM Configuration --------------------------
; <h> SRAM Configuration
;   <o0> SRAM Base Address      <0x0-0xFFFFFFFF:8>
;   <o1> SRAM Size (in Bytes)   <0x0-0xFFFFFFFF:8>
; </h>
 *----------------------------------------------------------------------------*/
#define SRAM_START          0x20000000
#define SRAM_SIZE	        0x00020000

/*--------------------- Stack / Heap Configuration ---------------------------
; <h> Stack / Heap Configuration
;   <o0> Stack Size (in Bytes)  <0x0-0xFFFFFFFF:8>
;   <o1> Heap Size (in Bytes)   <0x0-0xFFFFFFFF:8>
; </h>
 *----------------------------------------------------------------------------*/
#define STACK_SIZE          0x00002000
#define HEAP_SIZE           0x00002000

/*--------------------- CMSE Veneer Configuration ---------------------------
; <h> CMSE Veneer Configuration
;   <o0>  CMSE Veneer Size (in Bytes) <0x0-0xFFFFFFFF:32>
; </h>
 *----------------------------------------------------------------------------*/
#define __CMSEVENEER_SIZE   0x200

/*
;-------- <<< End of Use Configuration Section >>> -------------------
*/

#define LDROM_START         0x0F100000
#define LDROM_SIZE          0x00004000
#define DF0_START           0x0F200000
#define DF0_SIZE            0x00004000
#define DF1_START           0x0F210000
#define DF1_SIZE            0x00010000

/*----------------------------------------------------------------------------
  User Stack & Heap boundary definition
 *----------------------------------------------------------------------------*/
#define __STACK_TOP    ( SRAM_START + SRAM_SIZE - __STACKSEAL_SIZE )    /* starts at end of RAM - 8 byte stack seal */
#define __HEAP_BASE    ( AlignExpr(+0, 8))                              /* starts after RW_RAM section, 8 byte aligned */

/* ----------------------------------------------------------------------------
  Stack seal size definition
 *----------------------------------------------------------------------------*/
#if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
#define __STACKSEAL_SIZE   ( 8 )
#else
#define __STACKSEAL_SIZE   ( 0 )
#endif
    
/*----------------------------------------------------------------------------
  Region base & size definition
 *----------------------------------------------------------------------------*/
#if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
#define TZ_NSC_START        ( FLASH_START + FLASH_SIZE - __CMSEVENEER_SIZE )
#define TZ_NSC_SIZE         ( __CMSEVENEER_SIZE )
#else
#define TZ_NSC_SIZE         ( 0 )
#endif

#define __RO_BASE           ( FLASH_START )
#define __RO_SIZE           ( FLASH_SIZE - TZ_NSC_SIZE )

#define __RW_BASE           ( SRAM_START )
#define __RW_SIZE           ( SRAM_SIZE - STACK_SIZE - HEAP_SIZE )

/*----------------------------------------------------------------------------
  Scatter Region definition
 *----------------------------------------------------------------------------*/
LR_ROM __RW_BASE __RW_SIZE  {                       ; load region size_region
    ER_ROM __RW_BASE __RW_SIZE  {                   ; load address = execution address
        *.o (RESET, +First)
        *(InRoot$$Sections)
        ; Make sure reset_handler ends up in root segment
        startup_M3351.o
        .ANY (+RO)
        .ANY (+RW +ZI)
    }
    
#if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
    NSC_ROM TZ_NSC_START TZ_NSC_SIZE
    {
        .ANY (Veneer$$CMSE)
    }
#endif

#if HEAP_SIZE > 0
    ARM_LIB_HEAP  __HEAP_BASE EMPTY  HEAP_SIZE {}		; Reserve empty region for heap
#endif

    ARM_LIB_STACK __STACK_TOP EMPTY - STACK_SIZE {}     ; Reserve empty region for stack

#if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
STACKSEAL +0 EMPTY __STACKSEAL_SIZE {
        ; Reserve empty region for stack seal immediately after stack
    }
#endif
}

LR_LDROM LDROM_START LDROM_SIZE
{
    ER_LDROM +0
    {
        .ANY (.ldrom)
    }
}

LR_DF0 DF0_START DF0_SIZE
{
    ER_DF0 +0
    {
        .ANY (.dataflash0)
    }
}

LR_DF1 DF1_START DF1_SIZE
{
    ER_DF1 +0
    {
        .ANY (.dataflash1)
    }
}
